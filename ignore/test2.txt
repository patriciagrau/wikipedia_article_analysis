Usage:
   gfud check-treebank
 | gfud statistics <option>*
 | gfud pattern-match (adjust|prune)? ('<pattern>' | -f <file>)
 | gfud pattern-replace ('<replacement>' | -f <file>)
 | gfud cosine-similarity <file> <file> <option>*
 | gfud cosine-similarity-sort <file> <file> <option>*
 | gfud not-covered <standardfile> <testedfile> <option>*
 | gfud extract-pos-words
 | gfud extract-pos-feats-words
 | gfud lexical-entries <abslabels-file>
 | gfud lexical-entries-gf <abslabels-file> <morphodict-pgf-file>
 | gfud sample <int>
 | gfud conll2tree
 | gfud conll2reduced <reduce_pattern>
 | gfud reduced2conll <reduce_pattern>
 | gfud oneliner2conll <reduce_pattern>
 | gfud adjust-positions
 | gfud conll2pdf
 | gfud parse2pdf
 | gfud conll2latex
 | gfud parse2latex <file>
 | gfud eval (micro|macro) (LAS|UAS) <goldfile> <testablefile> units?
 | gfud dbnf <dbnf-grammarfile> <startcat> <-cut=NUMBER>? <-show=NUMBER>? <-onlyparsetrees>?
 | gfud extract-dbnf <int>
 | gfud calibrate-dbnf <file>
 | gfud check-annotations <path> <language> <startcat>
 | gfud (ud2gf|gf2ud|string2gf2ud|ud2gfparallel) <path> <language> <startcat> <option>*
where path = grammardir/abstractprefix, language = concretesuffix.
The files read are <path>.pgf, <path>.labels, and <path><language>.labels.
Except for <file> arguments, the input comes from stdIO, and the output goes there as well
The option ud2gfparallel should be used with the Haskell runtime flag +RTS -Nx -RTS
where x is the number of cores you want to use in parallel processing.
For more functionalities: open MainUDGF.hs in ghci.
Pattern syntax:
   (FORM | LEMMA | POS | DEPREL | DEPREL_ | FEATS | FEATS_) <string>
 | ARG <pos> <deprel>
 | (AND | OR) [ <pattern>,* ]
 | (SEQUENCE | SEQUENCE_) [ <pattern>,* ]
 | NOT <pattern>
 | (TREE | TREE_) <pattern> <pattern>*
 | (DEPTH | DEPTH_UNDER | DEPTH_OVER) <int>
 | (LENGTH | LENGTH_UNDER | LENGTH_OVER) <int>
 | TRUE
 | PROJECTIVE
where DEPREL_, FEATS_, SEQUENCW_, TREE_ mean matching a subset/substring.
<string> arguments require double quotes, and the <pattern> itself is in single quotes
if read from command line, but not if read from a file (the -f option).
Replacement syntax:
   (REPLACE_FORM | REPLACE_LEMMA | REPLACE_POS | REPLACE_DEPREL | REPLACE_DEPREL_) <string> <string>
 | (REPLACE_FEATS | REPLACE_FEATS_) <string> <string>
 | IF <pattern> <replacement>
 | UNDER <pattern> <replacement>
 | OVER <pattern> <replacement>
 | PRUNE <pattern> <int>
 | FILTER_SUBTREES <pattern> <pattern>
 | FLATTEN <pattern>
 | RETARGET <pattern> <pattern> <pattern>
 | CHANGES [ <replacement>,* ]
 | COMPOSE [ <replacement>,* ]
<reduce_pattern> is a string such as xx_x__xx that hides the _ fields of UD words in conll2reduced.
In reduced2conll it inserts _ to those fields to obtain legal CoNLL.
In oneliner2conll xx_x__xx, each sentence is given as in '1 John NOUN 2 nsubj ; 2 walks VERB 0 root'.

Options:
  msg	show message and not just the result
  ud	UD tree in CoNLLU format
  err	validation errors in the UD tree
  ut	tree-structured UD tree
  dt0	internal development tree, as initialized
  dt1	internal development tree, with words annotated
  dt	final development tree, with all alternatives but no backups
  bt0	the best (most complete) tree, without backups
  bt	the best tree, backups added
  at0	resulting GF tree, with macros in place
  at	final GF tree, macros expanded
  tc	type checking the final GF tree
  sum	summary: GF tree built from the interpreted nodes
  gf	(gf2ud) original GF tree
  an0	(gf2ud) initial annotated tree
  an1	(gf2ud) annotated tree with labels
  an2	(gf2ud) annotated tree with labels and words
  an3	(gf2ud) final annotated tree with nonlocal operations
  vat	visualize abstract syntax tree using Graphviz
  vud	visualize dependency tree using LaTeX converted to pdf
  lud	visualize dependency tree in LaTeX and output the LaTeX code
  lin	linearize tree using the active language of the environment
  units	(eval) print evaluation per sentence, from lowest score upwards
  stat	show statistics of original and interpreted words
  adjust	(pattern-match) adjust results to a valid UD trees with root
  prune	(pattern-match) show only the roots of matching subtrees
  FORM	(statistics) surface forms
  LEMMA	(statistics) lemmas
  POS	(statistics) part of speech tags
  FEATS	(statistics) morphological features
  DISTANCE	(statistics) distance to head i.e. head_position - own_position
  DEPREL	(statistics) dependency labels
  SUBTREETYPE	(statistics) types of subtrees
  LENGTH	(statistics) number of words in a sentence
  DEPTH	(statistics) depth of dependency tree

